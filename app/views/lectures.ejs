<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<link rel="stylesheet" type="text/css" href="style.css"/>
	<title>Ohjelmallinen Sisällönhallinta</title>
	<meta name="author" content="Jonne Pihlanen">
	<meta name="description" content="Luentopäiväkirja">
	<style type="text/css">
		body {
			font-size:90%;
  			line-height:1.5;
			font-family: 'Merriweather', Georgia, 'Times New Roman', Times, serif;
			padding: 20px;
		}
	</style>
	<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
</head>

<body>
<!-- Main jumbotron for a primary marketing message or call to action -->
<div class="jumbotron">
	<div class="container">
		<h2>Luentopäiväkirja</h2>
		<p>Ohjelmallinen Sisällönhallinta 2015</p>
	</div>
</div>

<div class="container">

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 3/2015 <a name="viikko3"></a></h2>

				<h3> Tiivistelmä luentoviikosta 3.1</h3>

				<p>
					Käytännön asiat. En päässyt aloitusluennolle paikalle koska tieto tuli vähän viime tipassa, mutta aloitusluennon aiheena olivat kurssin käytännön asiat, järjestelyt ja tavoitteet. Aloitusluennon materiaalista bongasinkin luentopäiväkirja mahdollisuuden ja sitä tässä aloittelen sitten kirjoittamaan. Materiaalin lopussa oli myös johdantoa aiheeseen: Ohjelmointi hypermedian apuvälineenä mahdollistaa muun muassa sisällönhallinnan automatisoinnin(APIt), toteutustyön automatisoinnin(navigointi,tietokannat,lomakkeet), monikanavajulkaisemisen(räätälöity vs joustava julkaiseminen) sekä vuorovaikutuksen toteuttamisen(esim. rekisteröityminen). Lisäksi puhuttiin palvelimen roolista ohjelmoinnissa eli asiakkaan ja palvelimen rooleista ja mahdollisuuksista jakaa laskentaa jommalle kummalle osapuolelle. Tällöin puhutaan käsitteistä älykäs vs. kevyt asiakas. Lopuksi mainittiin muunmuassa että kokoajan kasvavan saatavilla olevan informaation vuoksi (some,API,avoin data) kehittäjien luovuus on käytännössä ainut uusien palveluiden syntymistä rajoittava tekijä.
				</p>

				<p>Koodiklinikka: </p>

				<p>
					Keskiviikkona pääsin sitten virallisesti aloittamaan kurssia koodiklinikan muodossa, joka vaikutti erittäin hyvältä! Koodiklinikoiden ajatuksena on ilmeisesti pohtia tekniikoita ja katsoa koodia ja erilaisia, mahdollisesti harjoitustyön kannalta hyvinkin oleellisia, tekniikoita sitten yhdessä. Oppimistapahtumana tilaisuus vaikutti mielekkäältä ja hyvinkin oppimista edistävältä. </p>

				<h3> Oivalluksia </h3>

				<p>
					Monikanavajulkaiseminen ja räätälöity vs. joustava julkaisu olivat jollakin tasolla ajatuksina tuttuja, mutta termit eivät ainakaan olleet joten sen nostaisin tärkeimmäksi asiaksi tältä viikolta. Uusia tuttavuuksia olivat myös termit Responsive Web Design, Progressive enhancement ja Unobtrusive JavaScript. Mielenkiintoista oli myös tajuta sanan NIH merkitys. Kirjaimet siis tarkoittavat "Not Invented Here" ja tämä tarkoittaa sitä, että järjestelmällisesti kieltäydytään käyttämästä valmiita asioita hyödyksi ja mieluummin kehitetään omat tilalle alusta asti.
				</p>

				<h3> Karsittavia asioita viikon annista </h3>

				<p> En keksi aloitusviikosta mitään karsittavaa. </p>
		</div>

		<div class="col-xs-6 col-lg-4">

			<h3>Avainsanoja</h3>

				<p>
					<a href="#viikko3">Käytännön asiat</a>,
					<a href="#viikko4">Web-arkkitehtuuri</a>,
					<a href="#viikko5">Ruudunraapijat</a>,
					<a href="#viikko6">Koostepalvelut</a>,
					<a href="#viikko7">Surveypal</a>,
					<a href="#viikko8">Verkkopalvelun arkkitehtuuri</a>,
					<a href="#viikko9">Web API ja avoin data</a>,
					<a href="#viikko10">Sisällönhallinta- ja julkaisujärjestelmät</a>,
					<a href="#viikko12">Käytön seuranta ja mukautuvat järjestelmät</a>,
					<a href="#viikko18">Data Science</a>,
					<a href="#viikko19">Yksityisluento</a>,
					<a href="#viikko20">Yhteenveto</a>
				</p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 4/2015 <a name="viikko4"></a> </h2>

				<h3> Tiivistelmä luentoviikosta 3.2</h3>

				<p>
					Web-arkkitehtuuri. Luennon aluksi tutkailtiin taululle piirretyn kuvan avulla Web-arkkitehtuuria. Kuvaan sisältyi client, HTTP, palvelin (HTTPD,filesystem,PHP->DB). HTTP-GET metodin lisäksi myös POST, jonka tarkoituksena on muuttaa palvelimen tilaa jotenkin. GET ja POST eri asioihin tarkoitettuja. Esimerkki arkkitehtuurin toiminnasta: Resurssi (sää,tampere), jolla tunniste (URL,URI,URN). Web-client tai browser tekee pyynnnön, pyynnön mukana matkaa tietoja, hakee tietoa kannasta (lämpötila,tuulen nopeus,ilmankosteus). SPA eli single page application on mahdollisesti jopa varsinaisesti yhteen tiedostoon kirjoitettu sovellus joka päivittää tietoja itsekseen ja ajatuksena siis myös se, että näkymä mukautuu toimintojen mukaisesti. (API first) API ensin ajattelu, kuumin aihe tällä hetkellä. Minimum viable product, pienimmän vaivan menetelmä? Suunnittelemalla rajapinta ensin saadaan ensin kartoitettua ydintoiminnallisuus jota käyttäjä haluaa. Node.js:ää kurkattiin pikaisesti. Puhuttiin myös muutoksesta kohti RESTful rajapintoja, eli rajapintoja joiden kutsuminen nojaa HTTP-GET-metodiin ja ne ovat luonteeltaan tilattomia. Mainittiin myös hyvä "Designing Beautiful REST APIs"-kalvosarja, joka vaikuttikin mielenkiintoiselta. (Kumpa olisin kandia kirjoittaessa sen jo nähnyt...) Tässä vaiheessa lähdin luennolta Futuricen Space Tyckiting kisaan, joten loppu tulee TTY-Piirin listauksesta. Ilmeisesti näytettiin vielä esimerkkinä Tesla Model S -sähköauton hallintaan tarkoitettua RESTful rajapintaa. Tämä on ajankohtainen aihe, sillä juuri tällä viikolla huomasin Sailfishille tulleen natiivin sovelluksen nimeltä Tesla. Se löytyy <a href="https://openrepos.net/content/yuvraaj/tesla">täältä:</a> Sovelluksen avulla voi muunmuassa nähdä auton sijainnin, lataustilanteen, vilkuttaa valoja tai soittaa torvea. Lopuksi vielä oli ilmeisesti esimerkkejä URI-tunnisteiston suunnittelusta, resursseista, JSON:ista ja PHP:sta, mutta niistä ei Piirissä ollut enempää asiaa. Koodiklinikan aiheina olisivat olleet Smarty, Mechanize, Beautiful Soup, Postman ja Swagger. Kaikki vaikuttivat mielenkiintoisilta asioilta kun kävin sivuilla vierailemassa.
				</p>

				<h3> Oivalluksia </h3>

				<p> Viisi uutta asiaa tulivat suoraan koodiklinikan aiheista. Toivottavasti niitä käsitellään hiukan ensiviikolla. API first -ajatteluun liittyen termi Minimum Viable Product oli uusi, sillä siis tarkoitetaan sitä, että sovelluksella on julkaistaessa vain ne ominaisuudet, jotka siltä välttämättä vaaditaan. </p>

				<h3> Karsittavia asioita viikon annista </h3>

				<p> Nämä ovat aika hankalia vastattavia, kun tiedonnälkä on kuitenkin aika suuri. Kertauksestakaan ei ole koskaan haittaa. Uudet asiat puolestaan ovat lähtökohtaisesti aina mielenkiintoisia. Mahdollinen Telnet-demo ehkä olisi karsittavissa, ellei sen historiallinen merkitys ole kovin suuri kurssin kannalta. </p>
		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 5/2015 <a name="viikko5"></a> </h2>

				<h3> Tiivistelmä luentoviikosta 3.3</h3>

				<p>
					Ruudunraapijat eli scraperit. Sisällön neuvotteluprosessi, selaimen pyyntö ja siihen vastaaminen. Computational linguistics, kiinnostavaa tämän luentopäiväkirjan kannalta, voisi koittaa tuollaista jos on mahdollista vaan. Raw data, Data tables(relaatiot avainsanojen mukaan + metadata), Visual structures, views. Mahdollisuus suosittelijajärjestelmän tekemiseen, esimerkiksi blogia lukiessa ehdotuksia samankaltaisista. Tagipilvi (Yksinkertainen ja mekaaninen toteutus sivun reunassa). Raapijan osa tässä mallissa on nimenomaan raw data-> datatables. Business Intelligence, raporttijärjestelmät, SAP. Data ei ole nykyään ongelma, sitä on paljon. Wikipedista esitettiin kuva ryömijän arkkitehtuurista. WWW-sivu ->Monisäikeinen lataaja -> Jono -> Scheduler(päättää kuinka usein pitää päivittää, omassa harkkatyössä CronJob) -> tallennus. Ryömijä yleensä lukee koko sivun ja laittaa sen talteen tekstinä. Ruudunraavinta - ja koodaus-kirjan esittelyä journalisteille. ScraperWiki: tehdään yhdessä raavintaa. Ghost in the web (Viittasi varmaankin ainakin löyhästi aiemmin mainittuun casper kirjastoon.): Emuloidaan selainta JavaScript kirjastolla, jolloin saadaan käytettyä dynaamista web-sivua. Raapija hakee nimenomaan dataa, yleensä yksittäisiä sivuja, voi olla myös semmoinen joka etenee esimerkiksi wikipediassa linkkien mukaan. Puhuttiin datan siivoamisesta, Google Refine, Data Wrangler kopioi datan html-lomakkeeseen ja sitten kun maalaa tekstiä niin työkalu esittää arvauksia siitä mitä halutaan tehdä. Näin syntyy sääntöjä datan siivoamiseen. Myös joitain esimerkkejä näytettiin.
				</p>

				<p> Koodiklinikka: </p>

				<p>
					käytiin läpi harjoitustyötä, mahdollisia aiheita ja työn pistetytystä. Oma haaveeni harkkatyöstä on avoimen rajapinnan rakentaminen suomen televisioaikatauluista.
				</p>

				<h3> Oivalluksia </h3>

				<p>
					Uusia termejä: sisällön neuvotteluprosessi, computational linguistics, Google Refine, Data Wrangler.
				</p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 6/2015 <a name="viikko6"></a></h2>

				<h3> Tiivistelmä luentoviikosta 3.4</h3>

				<p>

					Koostepalvelut. Yhdistetty data (linked data) mahdollistaa datan ohjelmallisen selaamisen ja lukemisen. Muita nimityksiä mashupille: Survos, muusaus, fuusaus. Koostepalvelun kehittäjä ei kerää pelkästään dataa vaan myös käyttöliittymä ja myös muunlaisia komponentteja. Tarkoitus on kuitenkin esittää tieto uudella ja aiempaa paremmalla ja selkeämmällä tavalla. Tulos on onnistuessaan käyttäjälle enemmän kuin osiensa summa. Selain on täysin erilainen alusta muihin verrattuna, "keitto", sinne voidaan laittaa mitä vaan ja painaa refresh-nappia ja aina tulee jotain toimivaa. Ilmaisuvoima on uskomattoman suuri. Tenttitärppiä, kolme eri koostamisen tasoa: Sisällön tasolla(RSS/Atom, Web APIt(REST), raavinta, GRDDL), sovelluslogiikan tasolla(datan koostaminen suodattaminen ja muuntaminen, Yahoo! Pipes, Google Fusion Tables) tai käyttöliittymän tasolla tai näiden yhdistelmänä. Esimerkki Zoomable Circle Packing, Visuaalisen informaation "mantra": ensin korkealla tasolla ja sitten zoomataan yksityiskohtiin. Esimerkkisovellus MyTube. Soittolista -> Last.fm palvelusta esittäjän nimi ja kuvaus, YouTube Bar, Visualisointi. Eri lähteistä haetusta datasta tehtiin uusi XML-tiedosto yhdistetyillä tiedoilla ja siitä (ilmeisesti) JSONia jota sitten annettiin YouTuben BAR-lisäosalle. Informaation visualisointi. Koostepalvelut esittelevät toimintamallin tietosisällön, toimintalogiikan ja käyttöliittymien automatisoidusta koostamisesta. Koostepalvelu - Xanadu ? (Transclusion - sen sijaan että copypaste viittaus -> raahataan viittaus alkuperäisestä lähteestä.) Menee ehkä vähän yli analysoinniksi. Yleinen ongelma koostepalvelujen kanssa on se, että toimijat eivät halua tukea tiedon uudelleenkäytön helppoutta, koska pelkona ihmisten ja mainostulojen menettäminen (Tämäkin ajankohtaista tv-tietojen noutamisen kanssa).

				</p>

				<p>	Koodiklinikka: </p>

				<p>
					Datan visualisointia web-ympäristössä ja siihen tarjolla olevia työkaluja. Highcharts helpompi oppia ja D3 vaikeampi. D3:n ideana on että JavaScriptin avulla manipuloidaan svg-tiedostoja. Elementti valitaan, luodaan datan perusteella, luoduille ja olemassa oleville annetaan sitten ominaisuuksia/toiminnallisuutta. D3 toteuttaa "Grammar of graphics" kirjan JavaScriptillä. Elementit tulevat ja poistuvat dokumentista. (Harkkartyössä kokeilinkin D3js:ää)

				 </p>

				<h3> Oivalluksia </h3>

				<p> Informaation visualisointi ja siihen liittyvät työkalut. </p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

				<h2> Viikko 7/2015 <a name="viikko7"></a></h2>

				<h3> Tiivistelmä luentoviikosta 3.5</h3>

				<p>
					Surveypal. Olin tiistain luennon aikaan Solitan järjestämässä Node.js koulutuksessa ja suurin osa luentopäiväkirjasta tuleekin kalvoista. Ville Kentän esityksen web-sovelluksen mukautumisesta mobiililaitteissa voisi tiivistää seuraavien kahden pääkohdan ympärille: erilliset toteutukset vai mukautuva toteutus.
				</p>
				<p>
					Erillisen toteutuksen hyvänä puolena on ainakin se, että palvelua käyttävällä laitteella on aina paras mahdollinen käyttökokemus ja toiminnallisuus. Huonona puolena tai pikemminkin haasteena on käyttäjän laitteen tunnistaminen. Periaatteessa itse kyllä aina erillisen toteutuksen kannalla, varsinkin natiivisovelluksien kanssa. Tilanne ei tietenkään webissä ole aivan sama.
				</p>

				<p>
					Mukautuvan toteutuksen parhaana puolena voisi mainita tuettujen laitteiden suuren skaalan, useimmat uudetkin laitteet ovat todennäköisesti tuettuina jo valmiiksi. Haittapuoleksi muodostuu saman koodikannan aiheuttama turhankin koodin lataaminen. Tämä kuulostaa kuitenkin vähän vanhalta ajatukselta, ehkä se aiemmin olikin isompi ongelma kuin nykyään.
				</p>

				<p>
					Roope Hakulisen Docker ja Ruby on Rails esitys. Docker on linux-pohjainen virtualisoinnin arbtraktiokerros, joka perustuu VirtualBoxiin. Se poistaa siis periaatteessa erillisen virtualisointiohjelmiston tarpeen eikä tarvitse erikseen asennella virtuaalikoneelle haluttua käyttöjärjestelmää vaan Docker kätkee nämä palikat sisäänsä. Docker-file konfiguraatio tiedosto näytti aika saman tapaiselta kuin Ansiblen playbook-tiedosto. Ajatus molemmissa vaikutti samalta, eli saatetaan konfiguroinnin kohteena oleva kone automaattisesti käyttökuntoon.
				</p>

				<p> Ruby on Rails on Web-applikaatiokehys Ruby-ohjelmointikielelle. Tärkeimpinä komentorivityökaluina mainittiin rails (palvelimen käynnistys) ja rake (tietokannan luominen, routes). Rake routes komento näytti mielenkiintoiselta, se näytti kaikki palvelun routet ja routeen liitetyn kontrollerin. En ole nodessa vielä törmännyt moiseen. </p>

				<p> Koodiklinikka: </p>

				<p>
					CodeIgniter esittelyä. Vaikutti ihan mielenkiintoiselta, mutta olen tosin valinnut jo oman toteutustekniikka pinoni harjoitustyöhön. CodeIgniter on siis kuitenkin MVC mallin tarjoava sovelluskehys PHP:lle. Kalvosarjan perusteella perusperiaatteet vaikuttivat samoilta sen käytössä kuin express:in kanssa.
				 </p>

				<h3> Oivalluksia </h3>

				<p> Code Igniterista en ollut aiemmin kuullutkaan. Docker vaikuttaa opettelun arvoiselta asialta. Ruby on Railsista olin kuullut ja nähnyt aiemmin mutta kalvosarja teki kyllä vaikutuksen. </p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 8/2015 <a name="viikko8"></a></h2>

				<h3> Tiivistelmä luentoviikosta 3.6</h3>

				<p> Verkkopalvelun arkkitehtuuri ja yleinen toiminnallisuus. Verkkopalveluiden kolme keskeistä toimintoa ovat pääsynhallinta(access), käyttäjän tunnistaminen(authentication) ja käyttöoikeuksien hallinta(autorization). Kolmikerrosmalli -> kohti javascriptiä eli kerroksien rajat hämärtyvät. Lomakkeet on kaiken perusta, mutta kuitenkin vain HTML:ää. Lomakepohjainen tunnistus on nykyään suosittua. Sähköpostia voitaisiin käyttää käyttäjänimenä, mutta silloin tietomurtojen seurauksena voitaisiin päästä helposti käsiksi muihinkin tileihin. Käyttöoikeuksien hallinta: ei ollenkaan, jokaiselle käyttäjälle erikseen, roolien avulla, profiilien avulla. Salasanat hashina kantaan eikä selkokielisenä :) Uloskirjautuminen myöskin huolehdittava kunnolla. (passportissa hoituu siten että pitää kutsua req.logout();) Lomaketoteutuksessa lomakkeet kommunikoivat Web-palvelimien kanssa HTTP:n avulla. GET turvallisiin pyyntöihin, POST ei-turvallisiin kuten tilaus koska palvelun tila muuttuu pyynnön seurauksena. Pysyvät linkit ovat kaikissa palveluissa perusasioita, mutta kuitenkin versiointi pitää ottaa huomioon. Esimerkiksi viimeisin versio aina esillä, mutta jossain saatavilla versiokohtaisetkin linkit. Toisaalta vastuu linkistä on ehkä vähän molemminpuolinen, linkin kohteena oleva palvelu voi tehdä kyllä uudelleenohjauksen vanhastakin linkistä ja toisaalta linkin palveluunsa laittavan tahon tulisi tarkistaa niiden toiminnallisuus. (Kai tätäkin voisi automatisoida vaikka sillä casperilla?) Web-lomakkeiden kanssa huomioitavia asioita: Ohjeet, opasteet, virheilmoitukset. Istunnot tehdään evästeillä. Tietoturvan toteuttamisessa on tehtävä kompromissi verkkopalvelun käytettävyyden, suorituskyvyn, kustannustehokkuuden ja turvallisuuden välillä. Verkkopalveluiden yhteisiä ja yleisiä ominaisuuksia: CRUD, kansainvälistäminen/lokalisaatio, admin-oikeudet, taggaaminen, hakeminen, räätälöidyt sivut, laiteriippumattomuus, käytön tilastointi ja analysointi, forum, ostoskori, pollit.
				</p>

				<p>Koodiklinikka:</p>

				<p>
					Harkkatyön ohjeen läpikäynti.
				</p>

				<h3> Oivalluksia </h3>

				<p> Tämä viikko oli aikalailla kertaus asioita, ehkä lokalisaatiosta puhuminen avasi taas vähän ajattelemaan että samanlailla se aikalailla kaikessa koodissa ja kaikilla alustoilla tehdään. </p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 9/2015 <a name="viikko9"></a></h2>

				<h3> Tiivistelmä luentoviikosta 3.7</h3>

				<p> Web APIt ja avoin data. Sain Digian työhaastattelun juuri luennon päälle, joten taas mennään kalvoista.</p>

				<p>
					Jarkko Moilasen eli API-lähettilään kalvot. Kalvosetti alkoi heti sanoilla evankelista ja samurai, joten en heti tiennyt miten suhtautua. Ensin mainittiin {API:SUOMI}.fi palvelu, jonka nimikin jo viittaa JSONin ilosanomaan. Palvelun ajatuksena on listata suomalaiset ilmaiset ja maksulliset rajapinnat ja mahdollistaa niiden kommentointi ja arvostelu. Rajapinnoille olemassa myös kuvauskieliä, mainittiin RAML, Swagger. Onnistuneen rajapinnan käyttökokemuksen (APX) piirteiksi mainittiin muunmuassa itsepalvelu, dokumentaatio, esimerkit, tuki, kojelauta. Avoimen APIn piirteiksi mainittiin avoin dokumentaatio, käyttöönotettavuus, testattavuus. Omassa vasta käyttöönotettavuus on huomioitu tarpeeksi hyvin, sillä testejä en ole vielä kirjoittanut ja dokumentaatiokin on alkuvaiheessa. Kalvosetti oli kaikenkaikkiaan erittäin mielenkiintoista luettavaa, harmi etten luennolle päässyt itse.
				</p>

				<p>
					Joonas Dukpan esitys avoimesta datasta Tampereen seudulla. Ensimmäisenä kiinnitin huomion ajan tasalla oleviin kalvoihin, kun siellä oli maininta myös Sailfish-versiosta sovelluksesta Nysset. Datan avoimuus tarkoittaa sitä että se on laillisesti uudelleenkäytettävää, teknisesti uudelleenkäytettävää ja maksutonta. Kaupunki alkaa siirtymään sovelluksien tuottajasta enemmänkin sovelluksien tekemisen mahdollistajaksi avaamalla dataansa. Avauksille annettiin kolme päätyyppiä: reaaliaikaiset, muut rajapintapalvelut ja tiedostomuotoiset rajapintapalvelut. Tampereella mainittiin myös olevan 122 datajoukkoa ja rajapintaa, kuulostaa jo aika isolta määrältä. Itsekin hahmottelin Solitan JavaScript koulutuksessa koirapuistoista jonkinlaista pientä palvelua. Seuraavaksi mainostettiin avoimen datan kilpailuja, jotka kyllä alkavat kiinnostamaan koko ajan enemmän. Lopuksi mainittiin kaupunkiyhteisöjen uusia tavoitteita ja 6Aika hanketta, jonka pääkohdat ovat: Yhteiset standardit ja tietomallit, Yhteiset hankinnat ja toteutukset, Aktiivinen keskustelu ja toisilta oppiminen, Resurssien yhdistäminen.
				</p>

				<p> Koodiklinikka: </p>

				<p>
					Richardin pitämä Firebase + Angular.js koodidemo. Firebase on reaaliaikainen tietokanta joka tarjoaa kehittäjille mahdollisuuden tallentaa ja synkronoida tietoa monista eri sovelluksista/clienteistä. Vaatii rekisteröitymisen. Sovellus oli hieno ja nopsa toimissaan. Seuraavaksi esiteltiin plunker.com sivustoa joka on siis webissä toimiva IDE, jolla voi tehdä ainakin html/css/js sovelluksia kirjastoineen eli jsFiddle enemmän toiminnallisuuden kanssa. Angular näytti ihan mielekkäältä. "ng-" alkuiset asiat ovat direktiivejä. Tätä pitää kyllä opetella kun en harkkartyöhön sitä alkanut vielä katsomaan.
				</p>

				<h3> Oivalluksia </h3>

				<p> Vertaus UI -> UX ja API -> APX sai hymyn huulille väkisin. Eipä tuota noin ole tullut ajateltua aiemmin.  </p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 10/2015 <a name="viikko10"></a></h2>

				<h3> Tiivistelmä luentoviikosta 3.8</h3>

				<p>
					Sisällönhallinta- ja julkaisujärjestelmät. Aluksi jutellaan siitä mitä ollaan aiemmin käyty läpi ja miten harkkatyötä kannattaisi lähteä tekemään. Oman harkkatyön "logiikka" on jo aikalailla valmis, koska scraper- ja mashup-toiminnallisuudet toimivat. Seuraavaksi mietin tarkemmin jatkanko tuolla sails.js frameworkillä vai ottaisinko expressin ja tekisin melkein kaiken itse vai ottaisinko sitten express-generator paketin joka tekisi paljon asioita valmiiksi.
				</p>
				<p>
					Informaatio muuttuu sisällöksi, kun se saa merkityksen. Sisällönhallintajärjestelmä on sisällön muokkaamiseen, hallintaan ja julkaisuun erikoistunut järjestelmä. Sisällön kapselointi yksiköihin. Sisältöyksikkö on sisällönhallinnan perusyksikkö. Se koostuu datasta ja metadatasta. Metatieto mahdollistaa automatisoidun tietojenkäsittelyn. Sisällönhallintajärjestelmästä saatavia lisäarvoja: tuottavuuden parantaminen, oikeuksien hallinta, työnkulun ohjaus, yhtenäinen ulkoasu, ulkoasun muokkaaminen. Huonon suunnittelun tai valintojen perusteella voi tapahtua mahdollisesti huonontumistakin. Esimerkiksi sivuston ulkoasun muuttaminen ilman sisältöyksiköiden käpistelyä. Tämä kyseinen sivu ei ihan näitä kaikkia sisällönhallinnan sääntöjä ainakaan täytä mutta ei varmaan tarkoituskaan. :D Sisällönhallintajärjestelmät voidaan luokitella sovellusalueen perusteella: media, enterprise, web, dokumentti, komponenttipohjaiset. Web-sisällönhallintajärjestelmä tarkoittaa erityisesti HTML-muotoisen datan käsittelyä. Online, Offline.
				</p>
				<p>
					Nopea esitys markdown -kielestä. Nimi oli outo mutta GitHubin readme.md selkisin nyt olemaan md eli MARKDOWN...:) Samoin Apiary palvelussa käytetään markdownia ja sillä saa tehtyä helposti rajapinnan dokumentaation.
				</p>
				<p>
					Seuraavaksi näytettiin latexille tehtyä Overleaf palvelua joka näytti siistiltä, tosin tykkään kyllä TexStudiosta ja muutenkin latexin kanssa leikkimisestä. Varmaan sitten jos porukalla jotain latex dokumenttia tehdään niin olisi helpompaa tuolla tehdä. Aiempi kokemus ainakin että OSX ja Windows käpistelemässä samaa latex-dokumenttia ei ole hyvä idea.
				</p>
				<p>
					Sisällön tuomisella tarkoitetaan sisällön tuomista järjestelmään ja se ei yleensä ole siinä muodossa kuin järjestelmä niitä tallentaa. Tuomiseen liittyy aina jonkunlainen jalostusprosessi. Tiedon tuottaminen. Tiedon tallentaminen eli tietokannat. Tietovarasto voidaan tuottaa monella tavalla: Määrämuotoinen tekstitiedosto, Rakenteinen dokumentti, Relaatiokanta, Dokumenttikanta. Kaikki sisältö on informaatiota mutta kaikki informaatio ei ole sisältöä. Raportoinnin/Analytiikan voisi nostaa tärkeimmäksi ominaisuudeksi. Julkaisujärjestelmien luokittelua: yksi kaikille, räätälöity, joustava. Tiedon vienti on myös yhdenlainen julkaisuprosessi. Vaaranpaikka kuitenkin jos omasta palvelusta voisi sitten exportata kaiken muihin sopivassa muodossa niin saattaa lähteä käyttäjät paremman palvelun mukaan helposti. (jos pelkää liikaa niin tulee vendor lock-in).
				</p>

				<p> Koodiklinikka: </p>

				<p>
					Aiheena regexp eli regular expressions eli säännölliset lausekkeet. RE määritellään omilla merkeillään, esim [0-9] tarkoittaa että hyväksytään kaikki 0-9 välillä. Aika siisti python esimerkki joka muunsi markdown tiedoston HTML:ksi ja tulosti sen terminaalissa. Avainsanat python, markdown, pprint, flask (sillä sen saisi julkaistua webiin).
				</p>

				<h3> Oivalluksia </h3>

				<p> Overleaf, .md-tiedostomuoto </p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 12/2015 <a name="viikko12"></a></h2>

				<h3> Tiivistelmä luentoviikosta 4.1 </h3>

				<p>
					Käytön seuranta ja mukautuvat järjestelmät. Verkkopalvelun parantamista on se, että käyttäjälle saadaan kokoajan parempi palvelu. AB-testausta ja MVP-ajatusta sivuten puhuttiin verkkopalvelun perustamisesta nopealla aikataululla ikäänkuin kokeeksi (proof of concept). Kaksi ääripäätä siis tehdä kauan ja kokeilematta ajatusta vs. MVP ja jokin pieni testi kärkeen löytyykö käyttäjiä.
				</p>
				<p>
					Mukautuvat järjestelmät ja suosittelijajärjestelmät. Verkkopalvelun käytön tai tutkimuksen ohjaamisessa on tärkeää pystyä visualisoimaan ja näyttämään erilaisten mittareiden tuloksia. Käytönseurannan käyttäminen ja hyödyntäminen aina tasapainoilua tietosuojan ja käyttäjien saaman lisähyödyn välillä. Hyvin rakennettu palvelu tarjoaa mahdollisuuden ottaa käytönseuranta pois päältä ja kytkeä se takaisin päälle halutessaan. Analytiikka ei aina läheskään kulje sinne asti minne pitäisi (Johtoportaassa). <b>Mukautuva hypermedia</b> tarkoittaa sitä, että käyttäjästä luotuun malliin yhdistetään sovelluksesta ja sisällöstä luotu malli ja näiden yhdistelmän avulla mukautetaan sovelluksesta käyttäjälle näytettävät näkymät. Kansainvälistäminen ja kotoistaminen. Kieli-merkkijonot omaan tiedostoonsa, ensin merkataan jonkinlaisilla makroilla että tämä on käännettävä merkkijono (esimerkiksi qsTr) ja sitten valmis ohjelma (Qt Linquist) irrottaa ne omaansa ja sitten sen voi laittaa esimerkiksi transifex palveluun halukkaiden käännettäväksi. Kontekstiherkkyys. Toteutus ei ole niin tärkeää kuin hyvä kokemus ! Solitan twitterissä oli asiaan liittyvä tviittikin: Done is better than perfect. Sopii kyllä omaan tekemiseen hyvin vaikka kyllä sitä haluaisi oikein aina tehdä kuitenkin.
				</p>

				<p> Koodiklinikka: </p>

				<p>
					Käytön muokkaaminen, responsiivinen käyttöliittymä kun laitteita on niin paljon nykyään ja näytön kokoja ja resoluutioita on paljon. Kontekstin tunnistaminen verkossa. PHP:lla tehtyä esimerkkiä suoraan luentokalvoista, kielen tunnistaminen, HTTP_REFERER kertoo mistä on saavuttu sivulle, käytettävä selain, ruudun koko. Käytännössä selaimen tunnistaminen tehtäisiin mieluusti kaupallisella sovelluksella joka vastaisi nopeaan päivitystahtiin. HTTP-pyynnön mukana tulevat tiedot eivät ole useinkaan luotettavia tai formaaleja esimerkiksi kielikoodit eivät aina normalisoituja pieniksi kirjaimiksi tms. Paikkatiedon hyödyntäminen suuressa osassa nykyään ja auttaa kohdennettujen palvelujen rakentamisessa. Helppo antaa lisätietoa käyttäjälle mitä ympärillä voisi olla mahdollista tehdä.
				</p>

				<h3> Oivalluksia </h3>

				<p> Paljon hyvää asiaa tuli tällä(kin) viikolla. Kontekstiherkkyys ainakin uusi sana, merkitys jossain määrin tuttu. </p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 18/2015 <a name="viikko18"></a></h2>

				<h3> Tiivistelmä luentoviikosta 4.6 </h3>

				<p>
					Data Science. Juuso Parkkinen Reaktorilta tuli pitämään vierailuluentoa aiheesta data science, eli on aikalailla kuin minulle tehty tämä luento siis. Avainsanoja: Machine Learning, data science, big data, data analytics, web analytics, data mining. Mihin sitä voi käyttää? Mitä se on käytännössä? Mitä tarkoittaa olla datan ajama :D? Mitä se ei ole?
				</p>

				<p>
					Melkein kaikkea voidaan mitata ja data vaikuttaa ja tulee vaikuttamaan elämäämme jatkuvasti. Datan kanssa työskentely tarjoaa mielenkiintoisia mahdollisuuksia. Data palvelut yleistyvät ja on hyvä tietää mistä ne tulee ja miten ne toimivat.
				</p>

				<p>
					Missä dataa käytetään? Business, luonnontieteissä (fysiikka), sosiaalisissa tieteissä, journalismi, softakehitys, itsensä mittaamisessa (Quantified self, MyData varmaan samaa asiaa).
				</p>

				<p>
					Esimerkkinä Netflix. Toinen Afrikasta, satelliittikuvista tunnistetaan talojen kattoja ja jos paljon rautakattoisia taloja niin se on indikaattori kylän varallisuudesta (vs. puuheinämutakatto). Datajournalismista oli esimerkkinä YLEn visualisaatio kaikista ehdokkaista ja ne oli klusteroitu oikeisto/vasemmisto vs liberaali/konservatiivi asteikolle.
				</p>

				<p>
					Esimerkkejä Louhos nimisestä paikasta, joka sisältää avoimen lähdekoodin datatieteilyalgoritmeja ja kaikkea datatieteeseen, opensource ja opendataan liittyvää. Esimerkiksi R:lle kehitetty rajapinta jolla voi hakea avoindata.fi palvelusta dataa käpisteltäväksi. Aika siistiä.
				</p>

				<p>
					Data tieteilijän taidot: ohjelmointi, hacker, matikka, tilastotiede, tietokanta, visualisaatio, kommunikaatio, domain knowledge, ongelmanratkaisu.
				</p>

				<p>
					Data mining tiede -prosessi: määrittele kysymys, hanki data, siivoa, tutki, mallinnus, kommunikoi tuloksista, analyysistä uudelleen toistettava, iteroi. 50-80% ajasta datan kanssa taisteluun.
				</p>

				<p>
					Data-analyysin tärkeimmät askeleet:
					<ul>
						<li>Tutkiva analyysi: tavoitteena selvittää sopiiko data mietittävään kysymykseen.</li> <li> Todennäköisyyksien mallintaminen: tavoitteena tehdä uskottava päätelmä datan perusteella.</li>
					</ul>
				</p>

				<p>
					Data-driven mindset on mututuntuman vastakohta. Kiinnostunut, aktiivinen, bayesiläinen, rohkea, ketterä, läpinäkyvä, avulias, totuudenmukainen, viisas (ei aina data-driven). A/B-testaus on data driven kehityksen ilmentymä, koska kerätään tietoa versiosta ja sitten parannetaan taas.
				</p>

				<p>
					Big data ei ole aina varsinaisista käyttötapauksista kerättyä dataa vaan lähinnä kaikki data, joten sen kanssa on oltava varovainen.
				</p>

				<h3> Oivalluksia </h3>

				<p> Louhos alkoi kiinnostamaan kovasti.  </p>

		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 19/2015 <a name="viikko19"></a></h2>

				<h3> Tiivistelmä luentoviikosta 4.7 </h3>

				<p>
					Yksityisluento. Luennosta oli jäänyt tieto kulkematta kaikille, joten olin ainut luennolla. Katsottiin vähän automaattista raapimista tekevää työkalua, joka näytti toimivan aika hyvin.
				</p>

				<hr>
		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">

			<h2> Viikko 20/2015 <a name="viikko20"></a></h2>

				<h3> Tiivistelmä luentoviikosta 4.8 </h3>

				<p>
					Yhteenveto. Aloitettiin kertaamalla vähän ohjelmallisen sisällönhallinnan tilan listaa.
				</p>

				<hr>
		</div>

		<div class="col-xs-12 col-sm-6 col-lg-8">
			<footer>
				<p>&copy; Jonne Pihlanen 2015</p>
			</footer>
		</div>

</div> <!-- /container -->

<% include footer %>
